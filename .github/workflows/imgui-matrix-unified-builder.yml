name: CMake on multiple platforms

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        build_type: [Release]
        c_compiler: [gcc, clang, cl]
        include:
          - os: windows-latest
            c_compiler: cl
            cpp_compiler: cl
            artifact_name: ${{ github.event.repository.name }}.exe
            asset_name: example_glfw_opengl2-windows-amd64.exe
       #   - os: ubuntu-latest
       #    c_compiler: gcc
       #    cpp_compiler: g++
       #    artifact_name: ${{ github.event.repository.name }}
       #    asset_name: example_glfw_opengl2-linux-g++-amd64
          - os: ubuntu-latest
            c_compiler: clang
            cpp_compiler: clang++
            artifact_name: ${{ github.event.repository.name }}
            asset_name: example_glfw_opengl2-linux-clang-amd64
          - os: macos-11
            c_compiler: clang
            cpp_compiler: clang++
            artifact_name: ${{ github.event.repository.name }}
            asset_name: ${{ github.event.repository.name }}-macos-amd64

            
        exclude:
          - os: windows-latest
            c_compiler: gcc
          - os: windows-latest
            c_compiler: clang
          - os: ubuntu-latest
            c_compiler: cl
          - os: ubuntu-latest
            c_compiler: gcc          

    steps:


      - name: Install dependencies (only for Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt update
          sudo apt install libxrandr-dev libxinerama-dev libxcursor-dev libxi-dev libxext-dev libwayland-dev libxkbcommon-dev libglfw3 libglfw3-dev

#      - name: Update brew (MacOS)
#        if: matrix.os == 'macos-11'
#        run: brew update
        
#      - name: Force cmake version (MacOS)
#        if: matrix.os == 'macos-11'
#        run: brew pin cmake

      - name: Install glfw (MacOS)
        if: matrix.os == 'macos-11'
        run: brew install --force glfw 
        
      - name: Install glew (MacOS)
        if: matrix.os == 'macos-11'
        run: brew install --force glew
        
      - name: Checkout Your Project
        uses: actions/checkout@v4

      - name: Set reusable strings for your project
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake for your project
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DGLFW_DIR="${{ steps.strings-glfw.outputs.build-output-dir-glfw }}"
          -S ${{ github.workspace }}

      - name: Build your project
        run: |
          if [ "$GITHUB_OS" = "windows-latest" ] || [ "$GITHUB_OS" = "ubuntu-latest" ]; then
           cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}
          else
            cmake --build ${{ steps.strings.outputs.build-output-dir }}
          fi
          
    #  - name: List contents of the build directory
    #    run: ls -R ${{ github.workspace }}/build

      - name: List contents of MacOS build folder 
        if: matrix.os == 'macos-11'
        run: ls -R ${{ github.workspace }}/build
        
      - name: Upload Windows x64 binaries to release
        if: matrix.os == 'windows-latest'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: D:/a/imgui-docking1.90.1-cmake-refactor/imgui-docking1.90.1-cmake-refactor/build/Release/example_glfw_opengl2.exe
          asset_name: example_glfw_opengl2-windows-amd64.exe
          tag: ${{ github.ref }}-${{ github.sha }}



      - name: Upload binaries to release (Linux - Clang)
        if: matrix.os == 'ubuntu-latest' && matrix.c_compiler == 'clang'
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: /home/runner/work/imgui-docking1.90.1-cmake-refactor/imgui-docking1.90.1-cmake-refactor/build/example_glfw_opengl2
          asset_name: example_glfw_opengl2-linux-clang-amd64
          tag: ${{ github.ref }}-${{ github.sha }}


